import db

import logging
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram import types, Bot, Dispatcher
from aiogram.types.web_app_info import WebAppInfo
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio


TOKEN = "BOT_TOKEN"  # Astra Token
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)


# Configure logging
logging.basicConfig(level=logging.INFO)


class FSM(StatesGroup):
    Introduction = State()
    Learning = State()


@dp.message(Command(commands=["start"]))
async def start(message: types.Message, state: FSMContext) -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    registered = await db.register(message.chat.id, message.from_user.username, str(message.from_user.first_name) + ' ' + str(message.from_user.last_name))
    if registered:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await state.set_state(FSM.Introduction)  # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        photo = FSInputFile("–ë–∞–Ω–Ω–µ—Ä1.png")
        inb = KeyboardButton(text='–í–ø–µ—Ä—ë–¥!')
        inkb = ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True, one_time_keyboard=True, keyboard=[[inb], ])
        info = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–°–æ–≤–µ—Ç ‚úé', callback_data="info")], ])
        await message.answer("*–ü—Ä–∏–≤–µ—Ç! üëã*\n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É Astra Linux.", reply_markup=info)
        await asyncio.sleep(2)
        await message.answer_photo(photo, "*–ù–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å* ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å Astra Linux –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ üòé", reply_markup=inkb)


@dp.callback_query(lambda call: call.data == "info", FSM.Introduction)
async def info(callback_query: types.CallbackQuery):
    await callback_query.answer(text="–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üîΩ", show_alert=True)


@dp.message(lambda message: '–í–ø–µ—Ä—ë–¥!' in message.text, FSM.Introduction)
async def lets_go(message: types.message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç –∏ —á—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ:", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(2)
    photo = FSInputFile("–ë–∞–Ω–Ω–µ—Ä2.png")
    inb = KeyboardButton(text='–ê –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç WebApp?')
    inkb = ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True, one_time_keyboard=True, keyboard=[[inb], ])
    await message.answer_photo(photo, "–ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π ‚Äî *—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π* üßë‚Äçüíª", reply_markup=inkb)


@dp.message(lambda message: '–ê –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç WebApp?' in message.text, FSM.Introduction)
async def move_on(message: types.message):
    ReplyKeyboardRemove()
    inb = InlineKeyboardButton(text='–í–≤–æ–¥–Ω—ã–π –º–æ–¥—É–ª—å üìù', web_app=WebAppInfo(url='https://astralinuxedu.tilda.ws/intro'))
    inkb = InlineKeyboardMarkup(inline_keyboard=[[inb], ])
    await message.answer("–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!\n–¢—ã –º–æ–∂–µ—à—å —É–∂–µ —Å–µ–π—á–∞—Å —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –æ–±—É—á–µ–Ω–∏—é, –ø—Ä–æ—á–∏—Ç–∞–≤ –Ω–∞—à –≤–≤–æ–¥–Ω—ã–π –º–æ–¥—É–ª—å üòâ", reply_markup=inkb)
    await asyncio.sleep(2)
    inb = KeyboardButton(text='–ê —á—Ç–æ –¥–∞–ª—å—à–µ?')
    inkb = ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True, one_time_keyboard=True, keyboard=[[inb], ])
    await message.answer("–ò–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª üëç", reply_markup=inkb)


@dp.message(lambda message: '–ê —á—Ç–æ –¥–∞–ª—å—à–µ?' in message.text, FSM.Introduction)
async def whats_next(message: types.message):
    photo = FSInputFile("–ë–∞–Ω–Ω–µ—Ä3.png")
    inb = KeyboardButton(text='–•–æ—Ä–æ—à–æ!')
    inkb = ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True, one_time_keyboard=True, keyboard=[[inb], ])
    await message.answer_photo(photo, "–ê —Ç–∞–∫–∂–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è —Å–ª–µ–¥—É—é—Ç *—Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è:*", reply_markup=inkb)


@dp.message(lambda message: '–•–æ—Ä–æ—à–æ!' in message.text, FSM.Introduction)
async def okay_then(message: types.message):
    await message.answer("–ö—Å—Ç–∞—Ç–∏! –ú—ã –∑–∞–±—ã–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∫–æ–µ-–∫–æ–≥–æ üëÄ", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(2)
    await message.answer_sticker("CAACAgIAAxkBAAEJEAZka6s4RR8aGymE9q6Mtn0qsUFVvQACbwAD29t-AAGZW1Coe5OAdC8E")
    await asyncio.sleep(2)
    await message.answer("–ó–Ω–∞–∫–æ–º—å—Å—è! –≠—Ç–æ `–ö–æ—Ç–æ–±–æ—Ç` ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω!")
    await asyncio.sleep(2)
    inb = KeyboardButton(text='–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!')
    inkb = ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True, one_time_keyboard=True, keyboard=[[inb], ])
    await message.answer("–û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –±—É–¥–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å —Ç–µ–±—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è üòº", reply_markup=inkb)


@dp.message(lambda message: '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!' in message.text, FSM.Introduction)
async def intro_end(message: types.message):
    photo = FSInputFile("–ë–∞–Ω–Ω–µ—Ä4.png")
    inb = KeyboardButton(text='–°—É–ø–µ—Ä, —è –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å!')
    inkb = ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True, one_time_keyboard=True, keyboard=[[inb], ])
    await message.answer_photo(photo, "–í–æ—Ç —Ç–∞–∫–∂–µ *–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–≥–∏—Ö –º–µ—Ö–∞–Ω–∏–∫ –∫—É—Ä—Å–∞*, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=inkb)


@dp.message(lambda message: '–°—É–ø–µ—Ä, —è –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å!' in message.text, FSM.Introduction)
async def intro_end(message: types.message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –∂–¥–µ—Ç —Ç–µ–±—è –Ω–∞ –Ω–∞—à–µ–º –∫—É—Ä—Å–µ, –∏ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ!\n\n–ú—ã –∂–µ–ª–∞–µ–º —Ç–µ–±–µ —É–¥–∞—á–∏ üçÄ", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(2)
    await message.answer("*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞*:\n\nüìÑ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª ‚Äî /learn\nüìê –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî /test\nüìÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Astra Linux ‚Äî /install\nüí¨ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî /profile\nüèÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ ‚Äî /board\n‚Ñπ –°–ø—Ä–∞–≤–∫–∞ ‚Äî /help")
    await state.set_state(FSM.Learning)


@dp.message(Command(commands=["install"]))
async def install(message: types.Message, state: FSMContext) -> None:
    if await state.get_state() == FSM.Introduction:
        return
    inb = InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Astra Linux üìù', web_app=WebAppInfo(url='https://astralinuxedu.tilda.ws/install'))
    inkb = InlineKeyboardMarkup(inline_keyboard=[[inb], ])
    await message.answer("–ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–∞ —Ç–≤–æ–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ Astra Linux,\n–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è *—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å* —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –µ—ë –∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏–∏ –∏ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –µ—ë –≤–µ—Ä—Å–∏—è—Ö üôå", reply_markup=inkb)
    await asyncio.sleep(1)
    await message.answer_sticker("CAACAgIAAxkBAAEJG_Zkb8Hcb3KKjskWUu_zqkEqxEc3bwACPwAD29t-AAH05pw4AeSqaS8E")


@dp.message(Command(commands=["help"]))
async def help_c(message: types.Message, state: FSMContext) -> None:
    if await state.get_state() == FSM.Introduction:
        return
    await message.answer("*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞*:\n\nüìÑ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª ‚Äî /learn\nüìê –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî /test\nüìÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Astra Linux ‚Äî /install\nüí¨ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî /profile\nüèÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ ‚Äî /board\n‚Ñπ –°–ø—Ä–∞–≤–∫–∞ ‚Äî /help")
    await asyncio.sleep(1)
    await message.answer("–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞, —Ç—ã –∑–∞–º–µ—Ç–∏–ª –æ—à–∏–±–∫—É –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, –ø–∏—à–∏ –Ω–∞–º @exsec2!")


@dp.message(Command(commands=["test"]))
async def test(message: types.Message, state: FSMContext) -> None:
    if await state.get_state() == FSM.Introduction:
        return
    inb1 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 1', callback_data="–ú–æ–¥—É–ª—å 1")
    inb2 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 2', callback_data="–ú–æ–¥—É–ª—å 2")
    inb3 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 3', callback_data="–ú–æ–¥—É–ª—å 3")
    inb4 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 4', callback_data="–ú–æ–¥—É–ª—å 4")
    inkb = InlineKeyboardMarkup(inline_keyboard=[[inb1], [inb2], [inb3], [inb4]])
    await message.answer("üìã –ú–µ–Ω—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π:", reply_markup=inkb)


@dp.callback_query(lambda call: "–ú–æ–¥—É–ª—å" in call.data)
async def module(callback_query: types.CallbackQuery, state: FSMContext):
    num = callback_query.data.split(' ')[1]
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data='–ù–∞–∑–∞–¥')
    if num == '1' or (await db.get_status(callback_query.message.chat.id, str(int(num)-1))).count('1') == 6:
        correct = await db.get_status(callback_query.message.chat.id, num)
        symbols = correct.replace('1', '‚úÖ').replace('0', '‚ùå').replace('‚ùå', ' ', 1)
        temp = [f'–¢–µ—Å—Ç {num}.1', f'–¢–µ—Å—Ç {num}.2', f'–¢–µ—Å—Ç {num}.3', f'–¢–µ—Å—Ç {num}.4', f'–¢–µ—Å—Ç {num}.5', f'–¢–µ—Å—Ç {num}.6']
        flag = False
        for i in range(6):
            if flag:
                temp[i] = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
            else:
                if correct[i] == '1':
                    temp[i] = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ' + temp[i][5:]
                else:
                    flag = True
        inb1 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.1 {symbols[0]}', callback_data=temp[0])
        inb2 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.2 {symbols[1]}', callback_data=temp[1])
        inb3 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.3 {symbols[2]}', callback_data=temp[2])
        inb4 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.4 {symbols[3]}', callback_data=temp[3])
        inb5 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.5 {symbols[4]}', callback_data=temp[4])
        inb6 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.6 {symbols[5]}', callback_data=temp[5])
    else:
        inb1 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.1 ‚ùå', callback_data=f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        inb2 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.2 ‚ùå', callback_data=f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        inb3 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.3 ‚ùå', callback_data=f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        inb4 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.4 ‚ùå', callback_data=f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        inb5 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.5 ‚ùå', callback_data=f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        inb6 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.6 ‚ùå', callback_data=f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
    if num in ["3", "4", "5", "6"]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        inb1 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.1 ‚ùå', callback_data=f'Unreleased')
        inb2 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.2 ‚ùå', callback_data=f'Unreleased')
        inb3 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.3 ‚ùå', callback_data=f'Unreleased')
        inb4 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.4 ‚ùå', callback_data=f'Unreleased')
        inb5 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.5 ‚ùå', callback_data=f'Unreleased')
        inb6 = InlineKeyboardButton(text=f'–¢–µ—Å—Ç {num}.6 ‚ùå', callback_data=f'Unreleased')
    inkb = InlineKeyboardMarkup(inline_keyboard=[[back_button], [inb1, inb2], [inb3, inb4], [inb5, inb6]])
    await callback_query.message.delete()
    user_data = await state.get_data()
    try:
        await bot.delete_message(callback_query.message.chat.id, user_data["toDelete"][0].message_id)
        await bot.delete_message(callback_query.message.chat.id, user_data["toDelete"][1].message_id)
    except Exception:
        ...
    await callback_query.message.answer("üìã –ú–µ–Ω—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π:", reply_markup=inkb)
    await callback_query.answer()


@dp.callback_query(lambda call: call.data == "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
async def unavailable(callback_query: types.CallbackQuery):
    await callback_query.answer(text="–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è!", show_alert=True)


@dp.callback_query(lambda call: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" in call.data)
async def unavailable(callback_query: types.CallbackQuery):
    await callback_query.answer(text="‚úÖ –¢—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!")
    await callback_query.message.delete()
    test_num = callback_query.data.split(' ')[1]
    inb = InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data=f"–ú–æ–¥—É–ª—å {test_num[0]}")
    inkb = InlineKeyboardMarkup(inline_keyboard=[[inb], ])
    photo = FSInputFile(f"–¢–µ—Å—Ç {test_num}.png")
    await callback_query.message.answer_photo(photo, f'*–¢–µ—Å—Ç {test_num}* ‚Äî {keys[test_num]["–ë–∞–ª–ª—ã"]} –æ—á–∫–æ–≤\n\n{keys[test_num]["–ü–æ—è—Å–Ω–µ–Ω–∏–µ"]}', reply_markup=inkb)


@dp.callback_query(lambda call: call.data == "–ù–∞–∑–∞–¥")
async def back(callback_query: types.CallbackQuery):
    inb1 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 1', callback_data="–ú–æ–¥—É–ª—å 1")
    inb2 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 2', callback_data="–ú–æ–¥—É–ª—å 2")
    inb3 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 3', callback_data="–ú–æ–¥—É–ª—å 3")
    inb4 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 4', callback_data="–ú–æ–¥—É–ª—å 4")
    inkb = InlineKeyboardMarkup(inline_keyboard=[[inb1], [inb2], [inb3], [inb4]])
    await callback_query.message.edit_reply_markup(callback_query.id, inkb)
    await callback_query.answer()


keys = {
    "1.1": {
        "–ë–∞–ª–ª—ã": 5,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "GPL (General Public License) ‚Äî —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–≤–æ–±–æ–¥–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ, –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —ç—Ç–æ–π –ª–∏—Ü–µ–Ω–∑–∏–µ–π, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —ç—Ç–∏ –∂–µ —Å–≤–æ–±–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –≠—Ç–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Linux.",
        "–û—Ç–≤–µ—Ç": "–ë",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "1.2": {
        "–ë–∞–ª–ª—ã": 5,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–õ–∏–Ω—É—Å –¢–æ—Ä–≤–∞–ª—å–¥—Å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —è–¥—Ä–∞ Linux, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –û–Ω —Ç–∞–∫–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏–∫–æ–º –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —è–¥—Ä–æ Linux –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π GPL, –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤–æ–±–æ–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.\n–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Ä–µ—à–µ–Ω–∏—é, Linux —Å—Ç–∞–ª –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤ –º–∏—Ä–µ.",
        "–û—Ç–≤–µ—Ç": "–ì",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "1.3": {
        "–ë–∞–ª–ª—ã": 5,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux ‚Äî —ç—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —è–¥—Ä–æ Linux –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ç.–¥.",
        "–û—Ç–≤–µ—Ç": "–í",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "1.4": {
        "–ë–∞–ª–ª—ã": 5,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–û–¥–Ω–∏–º –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ Linux —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤ Linux –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –Ω–∞ —Å–≤–æ–∏—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏.",
        "–û—Ç–≤–µ—Ç": "–ë",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "1.5": {
        "–ë–∞–ª–ª—ã": 10,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "Astra Linux ‚Äî —ç—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –±–∞–∑–µ Linux, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –≤–æ–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã. –û–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å—Ç–µ–ø–µ–Ω—å –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–µ–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        "–û—Ç–≤–µ—Ç": "–ê",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "1.6": {
        "–ë–∞–ª–ª—ã": 10,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Astra Linux –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –æ–±–æ—Ä–æ–Ω–Ω—ã–µ, –Ω–∞—É—á–Ω—ã–µ –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ, –≥–¥–µ –≤–∞–∂–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.\n\n–û–¥–Ω–∞–∫–æ, —ç—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.",
        "–û—Ç–≤–µ—Ç": "–í",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "`–ö–æ—Ç–æ–±–æ—Ç—É` –±—ã–ª–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á–∏—Ç–∞—Ç—å –ø—Ä–æ Linux –∏ —Å–ª—É—à–∞—Ç—å —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ —Ç–µ–ø–µ—Ä—å, –∫–∞–∂–µ—Ç—Å—è, –æ–Ω —Ö–æ—á–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å Astra Linux –∏ –Ω–µ –∑–Ω–∞–µ—Ç, –≥–¥–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –µ–º—É –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è —ç—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ ü§î",
        "–°—Ç–∏–∫–µ—Ä": "CAACAgIAAxkBAAEJH51kceqDSc5aOJtX8Q4BmzyPs5aVGQACXwAD29t-AAGEsFSbEa7K4y8E",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "2.1": {
        "–ë–∞–ª–ª—ã": 5,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏ –≤ Linux –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏—à `Ctrl+Alt+F1`. –≠—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç –≤–∞—Å –Ω–∞ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å–æ–ª—å, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π.\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à `Ctrl+Alt+F7`.",
        "–û—Ç–≤–µ—Ç": "–ë",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "2.2": {
        "–ë–∞–ª–ª—ã": 5,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–ö–æ–≥–¥–∞ –≤—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å–æ–ª–∏, —Ç–æ –≤ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ Linux.\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–±–ª–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã.",
        "–û—Ç–≤–µ—Ç": "–ê",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": "–û—Ç–∫—Ä–æ–π –∫–æ–Ω—Å–æ–ª—å –Ω–∞ —Å–≤–æ–µ–º –ü–ö —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏—à Ctrl+Alt+F1"
    },
    "2.3": {
        "–ë–∞–ª–ª—ã": 5,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–°–∏–º–≤–æ–ª # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–∞–∫ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (root). –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–Ω –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –∏ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª—é–±—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∏–º–≤–æ–ª $ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–º–µ–µ—Ç —Ç–∞–∫–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π.",
        "–û—Ç–≤–µ—Ç": "–ì",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "2.4": {
        "–ë–∞–ª–ª—ã": 5,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –≤ Astra Linux –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª–∞–º–∏. –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á, –º–µ–Ω—é –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        "–û—Ç–≤–µ—Ç": "–ë",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "2.5": {
        "–ë–∞–ª–ª—ã": 10,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–¢–µ—Ä–º–∏–Ω–∞–ª Fly - —ç—Ç–æ —ç–º—É–ª—è—Ç–æ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Astra Linux. –≠—Ç–æ –≤–∞–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.\n\n–¢–µ—Ä–º–∏–Ω–∞–ª Fly –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–∏—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–∏—Ö –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç.–¥.",
        "–û—Ç–≤–µ—Ç": "–í",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    },
    "2.6": {
        "–ë–∞–ª–ª—ã": 10,
        "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–æ–π—Ç–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –≤ —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –≤–≤–æ–¥–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ –∫–æ–Ω—Ü–µ 2 –ú–æ–¥—É–ª—è üòâ",
        "–û—Ç–≤–µ—Ç": "–ë",
        "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": "`–ö–æ—Ç–æ–±–æ—Ç`, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –Ω–∞ —Ç–µ–±—è, —Ç–æ–∂–µ —Ä–µ—à–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ –Ω–æ–≤–µ–Ω—å–∫—É—é Astra Linux –∏ —É–∂–µ –Ω–∞—á–∞–ª –∞–∫—Ç–∏–≤–Ω–æ –µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è üñ•\n\n–ù–æ —Ç–∞–∫ —É–∂ –≤—ã—à–ª–æ, —á—Ç–æ –æ–Ω –æ—á–µ–Ω—å —á–∞—Å—Ç–æ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç—Å—è –æ—Ç —Ä–∞–±–æ—Ç—ã, –∏ —ç–∫—Ä–∞–Ω –µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≥–∞—Å–Ω–µ—Ç... –ü–æ—ç—Ç–æ–º—É –µ–º—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞ üò§",
        "–°—Ç–∏–∫–µ—Ä": "CAACAgIAAxkBAAEJJ79kdiQYlLg6fB5wWRS4s1ZbgjT0yAACYgAD29t-AAGOFzVmmxPyHC8E",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": ""
    }
}


@dp.callback_query(lambda call: "–¢–µ—Å—Ç" in call.data)
async def module(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    if keys[callback_query.data.split(' ')[1]]["–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"] != '':
        mes1 = await callback_query.message.answer(keys[callback_query.data.split(' ')[1]]["–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"])
        await asyncio.sleep(1)
        mes2 = await callback_query.message.answer_sticker(keys[callback_query.data.split(' ')[1]]["–°—Ç–∏–∫–µ—Ä"])
        await asyncio.sleep(2)
        await state.update_data(toDelete=[mes1, mes2])
    inb1 = InlineKeyboardButton(text='–ê', callback_data=f"Check –ê {callback_query.data.split(' ')[1]}")
    inb2 = InlineKeyboardButton(text='–ë', callback_data=f"Check –ë {callback_query.data.split(' ')[1]}")
    inb3 = InlineKeyboardButton(text='–í', callback_data=f"Check –í {callback_query.data.split(' ')[1]}")
    inb4 = InlineKeyboardButton(text='–ì', callback_data=f"Check –ì {callback_query.data.split(' ')[1]}")
    inb5 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data=f"–ú–æ–¥—É–ª—å {callback_query.data.split(' ')[1][0]}")
    if keys[callback_query.data.split(' ')[1]]["–ü–æ–¥—Å–∫–∞–∑–∫–∞"] != '':
        inb6 = InlineKeyboardButton(text='–ü–æ–¥—Å–∫–∞–∑–∫–∞ üí°', callback_data=f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ {callback_query.data.split(' ')[1]}")
        inkb = InlineKeyboardMarkup(inline_keyboard=[[inb1, inb2], [inb3, inb4], [inb6], [inb5]])
    else:
        inkb = InlineKeyboardMarkup(inline_keyboard=[[inb1, inb2], [inb3, inb4], [inb5]])
    photo = FSInputFile(f"{callback_query.data}.png")
    await callback_query.message.answer_photo(photo, f'*{callback_query.data}* ‚Äî {keys[callback_query.data.split(" ")[1]]["–ë–∞–ª–ª—ã"]} –æ—á–∫–æ–≤', reply_markup=inkb)
    await callback_query.answer()


def get_badge(score: int) -> str:
    badges = ["üë®‚Äçüíª –ù–æ–≤–∏—á–æ–∫", "üåê Open-Source –¥–µ—è—Ç–µ–ª—å", "üñ• UNIX-–º–∞—Å—Ç–µ—Ä", "üßô‚Äç‚ôÇÔ∏è Root-–≤–æ–ª—à–µ–±–Ω–∏–∫", "ü¶∏‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π"]
    badge = ''
    if score < 20:
        badge = badges[0]
    elif score < 40:
        badge = badges[1]
    elif score < 60:
        badge = badges[2]
    elif score < 80:
        badge = badges[3]
    elif score < 100:
        badge = badges[4]
    return badge


@dp.callback_query(lambda call: "Check" in call.data)
async def module(callback_query: types.CallbackQuery):
    answer = callback_query.data.split(' ')[1]
    test_num = callback_query.data.split(' ')[2]
    if answer == keys[test_num]["–û—Ç–≤–µ—Ç"]:
        await callback_query.answer(text=f'–í–µ—Ä–Ω–æ ‚úÖ (+{keys[test_num]["–ë–∞–ª–ª—ã"]})')
        prev_b = get_badge(int(await db.get_score(callback_query.message.chat.id)))
        await db.set_score(callback_query.message.chat.id, keys[test_num]["–ë–∞–ª–ª—ã"])
        cur_b = get_badge(int(await db.get_score(callback_query.message.chat.id)))
        if prev_b != cur_b:
            await callback_query.message.answer(f"–¢—ã –¥–µ–ª–∞–µ—à—å –±–æ–ª—å—à–∏–µ —É—Å–ø–µ—Ö–∏! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º üéâ\n\n–¢–≤–æ–π –Ω–æ–≤—ã–π –±–µ–π–¥–∂:\n*{cur_b}*")
        await callback_query.message.edit_caption(callback_query.inline_message_id, f'*–¢–µ—Å—Ç {test_num}* ‚Äî {keys[test_num]["–ë–∞–ª–ª—ã"]} –æ—á–∫–æ–≤\n\n{keys[test_num]["–ü–æ—è—Å–Ω–µ–Ω–∏–µ"]}')
        if int(test_num[2]) < 6:
            next_num = test_num[:2] + str(int(test_num[2]) + 1)
            inb1 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data=f"–ú–æ–¥—É–ª—å {test_num[0]}")
            inb2 = InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data=f"–¢–µ—Å—Ç {next_num}")
            inkb = InlineKeyboardMarkup(inline_keyboard=[[inb1], [inb2]])
            await callback_query.message.edit_reply_markup(callback_query.id, inkb)
        else:
            inb1 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data=f"–ú–æ–¥—É–ª—å {test_num[0]}")
            inkb = InlineKeyboardMarkup(inline_keyboard=[[inb1], ])
            await callback_query.message.edit_reply_markup(callback_query.id, inkb)
        await db.set_status(callback_query.message.chat.id, test_num[0], test_num[2])
    else:
        await callback_query.answer(text="–ù–µ–≤–µ—Ä–Ω–æ ‚ùå", show_alert=True)


@dp.message(Command(commands=["learn"]))
async def learn(message: types.Message, state: FSMContext) -> None:
    if await state.get_state() == FSM.Introduction:
        return
    inb1 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 1', web_app=WebAppInfo(url='https://astralinuxedu.tilda.ws/page1'))
    module1 = await db.get_status(message.chat.id, "1")
    if module1.count("1") == 6:
        inb2 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 2', web_app=WebAppInfo(url='https://astralinuxedu.tilda.ws/page2'))
        inb3 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 3 ‚ùå', callback_data="Unreleased")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        inb4 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 4 ‚ùå', callback_data="Unreleased")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    else:
        inb2 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 2 ‚ùå', callback_data="–ó–∞–∫—Ä—ã—Ç–æ")
        inb3 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 3 ‚ùå', callback_data="Unreleased")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        inb4 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å 4 ‚ùå', callback_data="Unreleased")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    inkb = InlineKeyboardMarkup(inline_keyboard=[[inb1], [inb2], [inb3], [inb4]])
    await message.answer("üìù –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=inkb)


@dp.callback_query(lambda call: call.data == "–ó–∞–∫—Ä—ã—Ç–æ")
async def unavailable(callback_query: types.CallbackQuery):
    await callback_query.answer(text="–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–æ–¥—É–ª—è!", show_alert=True)


@dp.callback_query(lambda call: call.data == "Unreleased")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
async def unreleased(callback_query: types.CallbackQuery):
    await callback_query.answer(text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞ :(", show_alert=True)


@dp.callback_query(lambda call: "–ü–æ–¥—Å–∫–∞–∑–∫–∞" in call.data)
async def tip(callback_query: types.CallbackQuery):
    await callback_query.answer(text=keys[callback_query.data.split(' ')[1]]["–ü–æ–¥—Å–∫–∞–∑–∫–∞"], show_alert=True)


@dp.message(Command(commands=["board"]))
async def board(message: types.Message, state: FSMContext) -> None:
    if await state.get_state() == FSM.Introduction:
        return
    await message.answer(await db.get_rating(str(message.chat.id)))
    await asyncio.sleep(1)
    await message.answer_sticker("CAACAgIAAxkBAAEJIRdkco6bwqrAOQZplX2lftPbNE1x4wACcAAD29t-AAHqAAG3tyaYON0vBA")


@dp.message(Command(commands=["profile"]))
async def profile(message: types.Message, state: FSMContext) -> None:
    if await state.get_state() == FSM.Introduction:
        return
    name = message.from_user.first_name
    surname = message.from_user.last_name
    if name is None:
        name = ''
    if surname is None:
        surname = ''
    if name is None and surname is None:
        name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    score = await db.get_score(message.chat.id)
    position = (await db.get_position(str(message.chat.id))) + ' –ú–µ—Å—Ç–æ'
    if position == '1 –ú–µ—Å—Ç–æ':
        position += " ü•á"
    elif position == '2 –ú–µ—Å—Ç–æ':
        position += " ü•à"
    elif position == '3 –ú–µ—Å—Ç–æ':
        position += " ü•â"
    badge = get_badge(int(score))
    await message.answer(f"üîñ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n\n*–ò–º—è:* {name} {surname}\n*–ë–µ–π–¥–∂:* {badge}\n*–†–µ–π—Ç–∏–Ω–≥:* {position}\n*–û—á–∫–∏:* {score} ü™ô")


@dp.shutdown()
async def on_shut():
    print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")


if __name__ == "__main__":
    bot.parse_mode = 'MARKDOWN'
    dp.run_polling(bot)
